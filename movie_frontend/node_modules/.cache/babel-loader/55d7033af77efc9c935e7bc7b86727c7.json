{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Autocomplete, Button, CircularProgress, createFilterOptions, Grid, TextField } from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport const SearchBar = () => {\n  _s();\n\n  const history = useHistory();\n  const [value, setValue] = useState();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const classes = useStyles();\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n      await get(MATCHING_MOVIES, inputValue).then(data => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n\n        setLoading(false);\n      });\n    };\n\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleSelect = () => {\n    console.log(value); // console.log(movie);\n    // if (!movie.id) {\n    //   setDialogValue(movie);\n    //   setDialogOpen(true);\n    // } else {\n    //   setValue(movie);\n    //   history.push({\n    //     pathname: `/movie/${movie.id}`,\n    //   });\n    // }\n    //Route to movie page\n  };\n\n  const handleAddMovie = async movie => {\n    setDialogOpen(false);\n    await post(ADD_MOVIE, movie).then(data => {\n      console.log(\"sadfsadfsadf\");\n      history.push({\n        pathname: `/movie/${data}`\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: classes,\n      id: \"blur-on-select\",\n      blurOnSelect: true,\n      sx: {\n        width: 600\n      },\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      style: {\n        color: \"white\"\n      },\n      value: value,\n      isOptionEqualToValue: (option, value) => option.title === value.title,\n      getOptionLabel: option => option.title,\n      options: options,\n      open: open,\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n          filtered.push({\n            inputValue: params.inputValue,\n            id: \"\",\n            title: `Add \"${params.inputValue}\"?`,\n            genre: \"\",\n            description: \"\",\n            rating: 0,\n            numberOfVotes: 0\n          });\n        }\n\n        return filtered;\n      },\n      onChange: (event, value) => {\n        console.log(\"qwerwer\");\n      },\n      onInputChange: (event, newInputValue) => {\n        setInputValue(newInputValue);\n      },\n      renderOption: (params, option, {\n        selected\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          onClick: selected,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 4,\n            width: \"100%\",\n            color: \"white\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: option.imageUrl,\n                width: \"50px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: option.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this);\n      } // PaperComponent={(children) => (\n      //   <Grid container spacing={4} width=\"100%\" color=\"white\">\n      // //         <Grid item>\n      // //           <img src={option.imageUrl} width=\"50px\" />\n      // //         </Grid>\n      // //         <Grid item>\n      // //           <h3>{children.}</h3>\n      // //         </Grid>\n      // //       </Grid>\n      // )}\n      ,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Movie\",\n        InputProps: { ...params.InputProps,\n          classes: classes,\n          endAdornment: /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), dialogOpen && /*#__PURE__*/_jsxDEV(AddDialog, {\n      startValues: dialogValue,\n      handleAddMovie: handleAddMovie,\n      dialogOpen: dialogOpen,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchBar, \"YszveFl370XEZJVXot9WwrjwNT0=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = SearchBar;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n      color: \"white\"\n    }\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n      color: \"white\",\n      borderColor: \"white\"\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\"\n    }\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx"],"names":["React","Fragment","useEffect","useState","Autocomplete","Button","CircularProgress","createFilterOptions","Grid","TextField","useHistory","ADD_MOVIE","get","MATCHING_MOVIES","post","makeStyles","AddDialog","filter","SearchBar","history","value","setValue","open","setOpen","options","setOptions","inputValue","setInputValue","loading","setLoading","dialogValue","setDialogValue","dialogOpen","setDialogOpen","classes","useStyles","active","length","undefined","getMovies","then","data","handleSelect","console","log","handleAddMovie","movie","push","pathname","handleClose","width","color","option","title","params","filtered","id","genre","description","rating","numberOfVotes","event","newInputValue","selected","imageUrl","InputProps","endAdornment","theme","root","inputRoot","borderColor"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Autocomplete,\n  Button,\n  CircularProgress,\n  createFilterOptions,\n  Grid,\n  IconButton,\n  TextField,\n} from \"@mui/material\";\nimport { IMovie } from \"../interfaces/movieInterface\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport defaultImg from \"../images/avengers.jpeg\";\n\nexport interface IMovieOptionType {\n  id: string;\n  inputValue?: string;\n  title: string;\n  genre: string;\n\n  description: string;\n  rating: number;\n  numberOfVotes: number;\n}\n\nconst filter = createFilterOptions<IMovieOptionType>();\n\nexport const SearchBar = () => {\n  const history = useHistory();\n  const [value, setValue] = useState<IMovie>();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<readonly IMovie[]>([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const classes = useStyles();\n\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n\n      await get(MATCHING_MOVIES, inputValue).then((data) => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n        setLoading(false);\n      });\n    };\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleSelect = () => {\n    console.log(value);\n    // console.log(movie);\n    // if (!movie.id) {\n    //   setDialogValue(movie);\n    //   setDialogOpen(true);\n    // } else {\n    //   setValue(movie);\n    //   history.push({\n    //     pathname: `/movie/${movie.id}`,\n    //   });\n    // }\n    //Route to movie page\n  };\n  const handleAddMovie = async (movie: IMovie) => {\n    setDialogOpen(false);\n\n    await post(ADD_MOVIE, movie).then((data) => {\n      console.log(\"sadfsadfsadf\");\n\n      history.push({\n        pathname: `/movie/${data}`,\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        classes={classes}\n        id=\"blur-on-select\"\n        blurOnSelect\n        sx={{ width: 600 }}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        style={{ color: \"white\" }}\n        value={value}\n        isOptionEqualToValue={(option, value) => option.title === value.title}\n        getOptionLabel={(option) => option.title}\n        options={options}\n        open={open}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n            filtered.push({\n              inputValue: params.inputValue,\n              id: \"\",\n              title: `Add \"${params.inputValue}\"?`,\n              genre: \"\",\n\n              description: \"\",\n              rating: 0,\n              numberOfVotes: 0,\n            });\n          }\n          return filtered;\n        }}\n        onChange={(event, value) => {\n          console.log(\"qwerwer\");\n        }}\n        onInputChange={(event, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        renderOption={(params, option, { selected }) => {\n          return (\n            <Button fullWidth key={option.id} onClick={selected}>\n              <Grid container spacing={4} width=\"100%\" color=\"white\">\n                <Grid item>\n                  <img src={option.imageUrl} width=\"50px\" />\n                </Grid>\n                <Grid item>\n                  <h3>{option.title}</h3>\n                </Grid>\n              </Grid>\n            </Button>\n          );\n        }}\n        // PaperComponent={(children) => (\n        //   <Grid container spacing={4} width=\"100%\" color=\"white\">\n        // //         <Grid item>\n        // //           <img src={option.imageUrl} width=\"50px\" />\n        // //         </Grid>\n        // //         <Grid item>\n        // //           <h3>{children.}</h3>\n        // //         </Grid>\n        // //       </Grid>\n        // )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Movie\"\n            InputProps={{\n              ...params.InputProps,\n              classes: classes,\n\n              endAdornment: (\n                <Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n      {dialogOpen && (\n        <AddDialog\n          startValues={dialogValue!}\n          handleAddMovie={handleAddMovie}\n          dialogOpen={dialogOpen}\n          handleClose={handleClose}\n        />\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n\n      color: \"white\",\n    },\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n\n      color: \"white\",\n      borderColor: \"white\",\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\",\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\",\n    },\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}