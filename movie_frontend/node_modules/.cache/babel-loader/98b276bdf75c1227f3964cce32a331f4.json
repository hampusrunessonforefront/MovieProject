{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nexport const useMovies = () => {\n  _s();\n\n  const [value] = useState();\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n      await get(MATCHING_MOVIES, inputValue).then(data => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n\n        setLoading(false);\n      });\n    };\n\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n\n  const handleSelect = (event, movie) => {\n    if (movie) {\n      if (!movie.id) {\n        setDialogValue(movie);\n        setDialogOpen(true);\n      } else {\n        history.push({\n          pathname: `/movie/${movie.id}`\n        });\n      }\n    } //Route to movie page\n\n  };\n\n  const handleAddMovie = async movie => {\n    setDialogOpen(false);\n    console.log(movie);\n    await post(ADD_MOVIE, movie).then(data => {\n      console.log(\"sadfsadfsadf\");\n      history.push({\n        pathname: `/movie/${data}`\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleNewInput = input => {\n    setInputValue(input);\n  };\n\n  return {\n    value,\n    options,\n    loading,\n    dialogValue,\n    dialogOpen,\n    handleSelect,\n    handleAddMovie,\n    handleClose,\n    handleNewInput\n  };\n};\n\n_s(useMovies, \"YoMHA8l/qCJQaeyz+8mm9fQ7ZBA=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBarHook.tsx"],"names":["useEffect","useState","useHistory","ADD_MOVIE","get","MATCHING_MOVIES","post","useMovies","value","options","setOptions","inputValue","setInputValue","loading","setLoading","dialogValue","setDialogValue","dialogOpen","setDialogOpen","history","active","length","undefined","getMovies","then","data","handleSelect","event","movie","id","push","pathname","handleAddMovie","console","log","handleClose","handleNewInput","input"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,eAAzB,EAA0CC,IAA1C,QAAsD,yBAAtD;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,KAAD,IAAUP,QAAQ,EAAxB;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAoB,EAApB,CAAtC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,EAA9C;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMkB,OAAO,GAAGjB,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,MAAM,GAAG,IAAb;;AAEA,QAAIT,UAAU,CAACU,MAAX,GAAoB,CAAxB,EAA2B;AACzB;AAEAX,MAAAA,UAAU,CAAC,EAAD,CAAV;AACA,aAAOY,SAAP;AACD;;AAED,UAAMC,SAAS,GAAG,YAAY;AAC5BT,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMV,GAAG,CAACC,eAAD,EAAkBM,UAAlB,CAAH,CAAiCa,IAAjC,CAAuCC,IAAD,IAAU;AACpD,YAAIL,MAAJ,EAAY;AACVV,UAAAA,UAAU,CAACe,IAAI,KAAKH,SAAT,GAAqB,EAArB,GAA0BG,IAA3B,CAAV;AACD;;AACDX,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OALK,CAAN;AAMD,KATD;;AAUAS,IAAAA,SAAS;AACT,WAAO,MAAM;AACXH,MAAAA,MAAM,GAAG,KAAT;AACD,KAFD;AAGD,GAxBQ,EAwBN,CAACZ,KAAD,EAAQG,UAAR,CAxBM,CAAT;;AA0BA,QAAMe,YAAY,GAAG,CAACC,KAAD,EAAaC,KAAb,KAA4B;AAC/C,QAAIA,KAAJ,EAAW;AACT,UAAI,CAACA,KAAK,CAACC,EAAX,EAAe;AACbb,QAAAA,cAAc,CAACY,KAAD,CAAd;AACAV,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAHD,MAGO;AACLC,QAAAA,OAAO,CAACW,IAAR,CAAa;AACXC,UAAAA,QAAQ,EAAG,UAASH,KAAK,CAACC,EAAG;AADlB,SAAb;AAGD;AACF,KAV8C,CAW/C;;AACD,GAZD;;AAaA,QAAMG,cAAc,GAAG,MAAOJ,KAAP,IAAyB;AAC9CV,IAAAA,aAAa,CAAC,KAAD,CAAb;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAEA,UAAMtB,IAAI,CAACH,SAAD,EAAYyB,KAAZ,CAAJ,CAAuBJ,IAAvB,CAA6BC,IAAD,IAAU;AAC1CQ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEAf,MAAAA,OAAO,CAACW,IAAR,CAAa;AACXC,QAAAA,QAAQ,EAAG,UAASN,IAAK;AADd,OAAb;AAGD,KANK,CAAN;AAOD,GAZD;;AAcA,QAAMU,WAAW,GAAG,MAAM;AACxBjB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAIA,QAAMkB,cAAc,GAAIC,KAAD,IAAmB;AACxCzB,IAAAA,aAAa,CAACyB,KAAD,CAAb;AACD,GAFD;;AAIA,SAAO;AACL7B,IAAAA,KADK;AAELC,IAAAA,OAFK;AAGLI,IAAAA,OAHK;AAILE,IAAAA,WAJK;AAKLE,IAAAA,UALK;AAMLS,IAAAA,YANK;AAOLM,IAAAA,cAPK;AAQLG,IAAAA,WARK;AASLC,IAAAA;AATK,GAAP;AAWD,CAlFM;;GAAM7B,S;UAQKL,U","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { IMovie, IMovieOptionType } from \"../interfaces/movieInterface\";\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\n\nexport const useMovies = () => {\n  const [value] = useState<IMovie>();\n  const [options, setOptions] = useState<readonly IMovie[]>([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState<IMovieOptionType>();\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n\n      await get(MATCHING_MOVIES, inputValue).then((data) => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n        setLoading(false);\n      });\n    };\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n\n  const handleSelect = (event: any, movie: any) => {\n    if (movie) {\n      if (!movie.id) {\n        setDialogValue(movie);\n        setDialogOpen(true);\n      } else {\n        history.push({\n          pathname: `/movie/${movie.id}`,\n        });\n      }\n    }\n    //Route to movie page\n  };\n  const handleAddMovie = async (movie: IMovie) => {\n    setDialogOpen(false);\n\n    console.log(movie);\n\n    await post(ADD_MOVIE, movie).then((data) => {\n      console.log(\"sadfsadfsadf\");\n\n      history.push({\n        pathname: `/movie/${data}`,\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleNewInput = (input: string) => {\n    setInputValue(input);\n  };\n\n  return {\n    value,\n    options,\n    loading,\n    dialogValue,\n    dialogOpen,\n    handleSelect,\n    handleAddMovie,\n    handleClose,\n    handleNewInput,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}