{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { Autocomplete, CircularProgress, createFilterOptions, TextField } from \"@mui/material\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport { useMovies } from \"./SearchBarHook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport const SearchBar = () => {\n  _s();\n\n  const {\n    value,\n    options,\n    loading,\n    dialogValue,\n    dialogOpen,\n    handleSelect,\n    handleAddMovie,\n    handleClose,\n    handleNewInput\n  } = useMovies();\n  const [open, setOpen] = useState(false);\n  const classes = useStyles(); // useEffect(() => {\n  //   if (!open) {\n  //     setOptions([]);\n  //   }\n  // }, [open]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: classes,\n      id: \"blur-on-select\",\n      freeSolo: true,\n      blurOnSelect: true,\n      clearOnBlur: true,\n      sx: {\n        width: 600\n      },\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      style: {\n        color: \"white\"\n      },\n      value: value,\n      isOptionEqualToValue: (option, value) => option.title === value.title,\n      getOptionLabel: option => option.title,\n      options: options,\n      open: open,\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n          filtered.push({\n            inputValue: params.inputValue,\n            id: \"\",\n            title: `Add \"${params.inputValue}\"?`,\n            genre: \"\",\n            description: \"\",\n            rating: 0,\n            numberOfVotes: 0\n          });\n        }\n\n        return filtered;\n      },\n      onChange: (event, value) => {\n        handleSelect(event, value);\n      },\n      onInputChange: (event, newInputValue) => {\n        handleNewInput(newInputValue);\n      },\n      renderOption: (params, option) => {\n        return /*#__PURE__*/_jsxDEV(\"span\", { ...params,\n          style: {\n            fontFamily: \"Josefin Sans, cursive\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: option.imageUrl,\n            width: \"50px\",\n            style: {\n              paddingRight: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), \" \", option.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this);\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Movie\",\n        InputProps: { ...params.InputProps,\n          classes: classes,\n          endAdornment: /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)\n        },\n        style: {\n          fontFamily: \"Josefin Sans, cursive\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), dialogOpen && /*#__PURE__*/_jsxDEV(AddDialog, {\n      startValues: dialogValue,\n      handleAddMovie: handleAddMovie,\n      dialogOpen: dialogOpen,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchBar, \"+/wjhiIOLWQXq2K8NtUb0ZKU7lE=\", false, function () {\n  return [useMovies, useStyles];\n});\n\n_c = SearchBar;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n      color: \"white\"\n    }\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n      color: \"white\",\n      borderColor: \"white\"\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\"\n    }\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx"],"names":["React","Fragment","useState","Autocomplete","CircularProgress","createFilterOptions","TextField","makeStyles","AddDialog","useMovies","filter","SearchBar","value","options","loading","dialogValue","dialogOpen","handleSelect","handleAddMovie","handleClose","handleNewInput","open","setOpen","classes","useStyles","width","color","option","title","params","filtered","length","inputValue","push","id","genre","description","rating","numberOfVotes","event","newInputValue","fontFamily","imageUrl","paddingRight","InputProps","endAdornment","theme","root","inputRoot","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SACEC,YADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,SAJF,QAKO,eALP;AAWA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;;;AAEA,MAAMC,MAAM,GAAGL,mBAAmB,EAAlC;AAEA,OAAO,MAAMM,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA;AATI,MAUFX,SAAS,EAVb;AAYA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAMqB,OAAO,GAAGC,SAAS,EAAzB,CAf6B,CAiB7B;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAED,OADX;AAEE,MAAA,EAAE,EAAC,gBAFL;AAGE,MAAA,QAAQ,MAHV;AAIE,MAAA,YAAY,MAJd;AAKE,MAAA,WAAW,MALb;AAME,MAAA,EAAE,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OANN;AAOE,MAAA,MAAM,EAAE,MAAM;AACZH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OATH;AAUE,MAAA,OAAO,EAAE,MAAM;AACbA,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAZH;AAaE,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAE;AAAT,OAbT;AAcE,MAAA,KAAK,EAAEd,KAdT;AAeE,MAAA,oBAAoB,EAAE,CAACe,MAAD,EAASf,KAAT,KAAmBe,MAAM,CAACC,KAAP,KAAiBhB,KAAK,CAACgB,KAflE;AAgBE,MAAA,cAAc,EAAGD,MAAD,IAAYA,MAAM,CAACC,KAhBrC;AAiBE,MAAA,OAAO,EAAEf,OAjBX;AAkBE,MAAA,IAAI,EAAEQ,IAlBR;AAmBE,MAAA,aAAa,EAAE,CAACR,OAAD,EAAUgB,MAAV,KAAqB;AAClC,cAAMC,QAAQ,GAAGpB,MAAM,CAACG,OAAD,EAAUgB,MAAV,CAAvB;;AAEA,YAAIhB,OAAO,CAACkB,MAAR,GAAiB,CAAjB,IAAsBF,MAAM,CAACG,UAAP,CAAkBD,MAAlB,GAA2B,CAAjD,IAAsD,CAACjB,OAA3D,EAAoE;AAClEgB,UAAAA,QAAQ,CAACG,IAAT,CAAc;AACZD,YAAAA,UAAU,EAAEH,MAAM,CAACG,UADP;AAEZE,YAAAA,EAAE,EAAE,EAFQ;AAGZN,YAAAA,KAAK,EAAG,QAAOC,MAAM,CAACG,UAAW,IAHrB;AAIZG,YAAAA,KAAK,EAAE,EAJK;AAMZC,YAAAA,WAAW,EAAE,EAND;AAOZC,YAAAA,MAAM,EAAE,CAPI;AAQZC,YAAAA,aAAa,EAAE;AARH,WAAd;AAUD;;AACD,eAAOR,QAAP;AACD,OAnCH;AAoCE,MAAA,QAAQ,EAAE,CAACS,KAAD,EAAQ3B,KAAR,KAAkB;AAC1BK,QAAAA,YAAY,CAACsB,KAAD,EAAQ3B,KAAR,CAAZ;AACD,OAtCH;AAuCE,MAAA,aAAa,EAAE,CAAC2B,KAAD,EAAQC,aAAR,KAA0B;AACvCpB,QAAAA,cAAc,CAACoB,aAAD,CAAd;AACD,OAzCH;AA0CE,MAAA,YAAY,EAAE,CAACX,MAAD,EAASF,MAAT,KAAoB;AAChC,4BACE,qBAAUE,MAAV;AAAkB,UAAA,KAAK,EAAE;AAAEY,YAAAA,UAAU,EAAE;AAAd,WAAzB;AAAA,kCACE;AACE,YAAA,GAAG,EAAEd,MAAM,CAACe,QADd;AAEE,YAAA,KAAK,EAAC,MAFR;AAGE,YAAA,KAAK,EAAE;AAAEC,cAAAA,YAAY,EAAE;AAAhB;AAHT;AAAA;AAAA;AAAA;AAAA,kBADF,EAKK,GALL,EAMGhB,MAAM,CAACC,KANV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OArDH;AAsDE,MAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,UAAU,EAAE,EACV,GAAGA,MAAM,CAACe,UADA;AAEVrB,UAAAA,OAAO,EAAEA,OAFC;AAIVsB,UAAAA,YAAY,eACV,QAAC,QAAD;AAAA,uBACG/B,OAAO,gBACN,QAAC,gBAAD;AAAkB,cAAA,KAAK,EAAC,SAAxB;AAAkC,cAAA,IAAI,EAAE;AAAxC;AAAA;AAAA;AAAA;AAAA,oBADM,GAEJ,IAHN,EAIGe,MAAM,CAACe,UAAP,CAAkBC,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AALQ,SAHd;AAgBE,QAAA,KAAK,EAAE;AAAEJ,UAAAA,UAAU,EAAE;AAAd;AAhBT;AAAA;AAAA;AAAA;AAAA;AAvDJ;AAAA;AAAA;AAAA;AAAA,YADF,EA4EGzB,UAAU,iBACT,QAAC,SAAD;AACE,MAAA,WAAW,EAAED,WADf;AAEE,MAAA,cAAc,EAAEG,cAFlB;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,WAAW,EAAEG;AAJf;AAAA;AAAA;AAAA;AAAA,YA7EJ;AAAA,kBADF;AAuFD,CA9GM;;GAAMR,S;UAWPF,S,EAIYe,S;;;KAfLb,S;AAgHb,MAAMa,SAAS,GAAGjB,UAAU,CAAEuC,KAAD,KAAiB;AAC5CC,EAAAA,IAAI,EAAE;AACJ,4DAAwD;AACtD;AACA;AACA;AAEArB,MAAAA,KAAK,EAAE;AAL+C;AADpD,GADsC;AAU5CsB,EAAAA,SAAS,EAAE;AACTtB,IAAAA,KAAK,EAAE,OADE;AAET;AACA,4EAAwE;AACtE;AAEAA,MAAAA,KAAK,EAAE,OAH+D;AAItEuB,MAAAA,WAAW,EAAE;AAJyD,KAH/D;AAST,0CAAsC;AACpCA,MAAAA,WAAW,EAAE;AADuB,KAT7B;AAYT,uCAAmC;AACjCvB,MAAAA,KAAK,EAAE;AAD0B;AAZ1B;AAViC,CAAjB,CAAD,CAA5B","sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport {\n  Autocomplete,\n  CircularProgress,\n  createFilterOptions,\n  TextField,\n} from \"@mui/material\";\nimport { IMovie, IMovieOptionType } from \"../interfaces/movieInterface\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport { useMovies } from \"./SearchBarHook\";\n\nconst filter = createFilterOptions<IMovieOptionType>();\n\nexport const SearchBar = () => {\n  const {\n    value,\n    options,\n    loading,\n    dialogValue,\n    dialogOpen,\n    handleSelect,\n    handleAddMovie,\n    handleClose,\n    handleNewInput,\n  } = useMovies();\n\n  const [open, setOpen] = useState(false);\n\n  const classes = useStyles();\n\n  // useEffect(() => {\n  //   if (!open) {\n  //     setOptions([]);\n  //   }\n  // }, [open]);\n\n  return (\n    <>\n      <Autocomplete\n        classes={classes}\n        id=\"blur-on-select\"\n        freeSolo\n        blurOnSelect\n        clearOnBlur\n        sx={{ width: 600 }}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        style={{ color: \"white\" }}\n        value={value}\n        isOptionEqualToValue={(option, value) => option.title === value.title}\n        getOptionLabel={(option) => option.title}\n        options={options}\n        open={open}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n            filtered.push({\n              inputValue: params.inputValue,\n              id: \"\",\n              title: `Add \"${params.inputValue}\"?`,\n              genre: \"\",\n\n              description: \"\",\n              rating: 0,\n              numberOfVotes: 0,\n            });\n          }\n          return filtered;\n        }}\n        onChange={(event, value) => {\n          handleSelect(event, value);\n        }}\n        onInputChange={(event, newInputValue) => {\n          handleNewInput(newInputValue);\n        }}\n        renderOption={(params, option) => {\n          return (\n            <span {...params} style={{ fontFamily: \"Josefin Sans, cursive\" }}>\n              <img\n                src={option.imageUrl}\n                width=\"50px\"\n                style={{ paddingRight: \"20px\" }}\n              />{\" \"}\n              {option.title}\n            </span>\n          );\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Movie\"\n            InputProps={{\n              ...params.InputProps,\n              classes: classes,\n\n              endAdornment: (\n                <Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </Fragment>\n              ),\n            }}\n            style={{ fontFamily: \"Josefin Sans, cursive\" }}\n          />\n        )}\n      />\n      {dialogOpen && (\n        <AddDialog\n          startValues={dialogValue!}\n          handleAddMovie={handleAddMovie}\n          dialogOpen={dialogOpen}\n          handleClose={handleClose}\n        />\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n\n      color: \"white\",\n    },\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n\n      color: \"white\",\n      borderColor: \"white\",\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\",\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\",\n    },\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}