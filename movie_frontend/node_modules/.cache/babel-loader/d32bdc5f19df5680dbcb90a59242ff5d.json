{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Autocomplete, CircularProgress, TextField } from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport { get, ALL_MOVIES } from \"../services/restService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n\n  const history = useHistory();\n  const [value, setValue] = useState();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const loading = open && options.length === 0;\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    if (inputValue.length < 3) {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      const data = await get(ALL_MOVIES);\n\n      if (active) {\n        setOptions(data === undefined ? [] : data);\n      }\n    };\n\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleSelect = (event, value) => {\n    if (value != null) {\n      history.push({\n        pathname: `/movie/${value.id}`,\n        state: value\n      });\n    } //Route to movie page\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: \"free-solo\",\n      sx: {\n        width: 600\n      },\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      isOptionEqualToValue: (option, value) => option.title === value.title,\n      getOptionLabel: option => option.title,\n      options: options,\n      open: open,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Movie\",\n        InputProps: { ...params.InputProps,\n          endAdornment: /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this),\n      onChange: (event, value) => handleSelect(event, value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SearchBar, \"io0ZMwYT/v4TozMTf0hmnq8Y0qM=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx"],"names":["React","Fragment","useEffect","useState","Autocomplete","CircularProgress","TextField","useHistory","get","ALL_MOVIES","SearchBar","history","value","setValue","open","setOpen","options","setOptions","inputValue","setInputValue","loading","length","active","undefined","getMovies","data","handleSelect","event","push","pathname","id","state","width","option","title","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Autocomplete, CircularProgress, Grid, TextField } from \"@mui/material\";\nimport { IMovie } from \"../interfaces/movieInterface\";\nimport movieImage from \"../images/movieIMG.jpeg\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { height } from \"@mui/system\";\nimport { get, ALL_MOVIES } from \"../services/restService\";\nimport { formatWithOptions } from \"util\";\nimport { resolve } from \"dns\";\nimport throttle from \"lodash/throttle\";\n\nexport const SearchBar = () => {\n  const history = useHistory();\n  const [value, setValue] = useState();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<readonly IMovie[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const loading = open && options.length === 0;\n\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    if (inputValue.length < 3) {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      const data = await get(ALL_MOVIES);\n      if (active) {\n        setOptions(data === undefined ? [] : data);\n      }\n    };\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  const handleSelect = (event: any, value: any) => {\n    if (value != null) {\n      history.push({\n        pathname: `/movie/${value.id}`,\n        state: value,\n      });\n    }\n\n    //Route to movie page\n  };\n\n  return (\n    <>\n      <Autocomplete\n        id=\"free-solo\"\n        sx={{ width: 600 }}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        isOptionEqualToValue={(option, value) => option.title === value.title}\n        getOptionLabel={(option) => option.title}\n        options={options}\n        open={open}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Movie\"\n            InputProps={{\n              ...params.InputProps,\n\n              endAdornment: (\n                <Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </Fragment>\n              ),\n            }}\n          />\n        )}\n        onChange={(event, value) => handleSelect(event, value)}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}