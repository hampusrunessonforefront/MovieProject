{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Autocomplete, CircularProgress, TextField } from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport { get, ALL_MOVIES } from \"../services/restService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n\n  const history = useHistory();\n  const [suggestions, setSuggestions] = useState();\n  const [open, setOpen] = useState(false);\n  const [movieData, setMovieData] = useState([]);\n  const loading = open && movieData.length === 0;\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      console.log(\"hallo\");\n      const data = await get(ALL_MOVIES);\n\n      if (active) {\n        new Promise(resolve => {\n          setTimeout(() => {\n            setMovieData(data === undefined ? [] : data);\n            resolve();\n          }, 4000);\n        });\n      }\n    };\n\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n  useEffect(() => {\n    if (!open) {\n      setMovieData([]);\n    }\n  }, [open]);\n\n  const handleSelect = (event, value) => {\n    if (value != null) {\n      history.push({\n        pathname: `/movie/${value.id}`,\n        state: value\n      });\n    } //Route to movie page\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: \"free-solo\",\n      sx: {\n        width: 600\n      },\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      isOptionEqualToValue: (option, value) => option.title === value.title,\n      getOptionLabel: option => option.title,\n      options: movieData,\n      open: open,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Movie\",\n        InputProps: { ...params.InputProps,\n          endAdornment: /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this),\n      onChange: (event, value) => handleSelect(event, value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SearchBar, \"7dlb6QYyay/3J60RQj8/bOesz9c=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx"],"names":["React","Fragment","useEffect","useState","Autocomplete","CircularProgress","TextField","useHistory","get","ALL_MOVIES","SearchBar","history","suggestions","setSuggestions","open","setOpen","movieData","setMovieData","loading","length","active","undefined","getMovies","console","log","data","Promise","resolve","setTimeout","handleSelect","event","value","push","pathname","id","state","width","option","title","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Autocomplete, CircularProgress, Grid, TextField } from \"@mui/material\";\nimport { IMovie } from \"../interfaces/movieInterface\";\nimport movieImage from \"../images/movieIMG.jpeg\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { height } from \"@mui/system\";\nimport { get, ALL_MOVIES } from \"../services/restService\";\nimport { formatWithOptions } from \"util\";\nimport { resolve } from \"dns\";\n\nexport const SearchBar = () => {\n  const history = useHistory();\n  const [suggestions, setSuggestions] = useState();\n  const [open, setOpen] = useState(false);\n  const [movieData, setMovieData] = useState<readonly IMovie[]>([]);\n  const loading = open && movieData.length === 0;\n\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      console.log(\"hallo\");\n\n      const data = await get(ALL_MOVIES);\n      if (active) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            setMovieData(data === undefined ? [] : data);\n            resolve();\n          }, 4000);\n        });\n      }\n    };\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  useEffect(() => {\n    if (!open) {\n      setMovieData([]);\n    }\n  }, [open]);\n  const handleSelect = (event: any, value: any) => {\n    if (value != null) {\n      history.push({\n        pathname: `/movie/${value.id}`,\n        state: value,\n      });\n    }\n\n    //Route to movie page\n  };\n\n  return (\n    <>\n      <Autocomplete\n        id=\"free-solo\"\n        sx={{ width: 600 }}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        isOptionEqualToValue={(option, value) => option.title === value.title}\n        getOptionLabel={(option) => option.title}\n        options={movieData}\n        open={open}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Movie\"\n            InputProps={{\n              ...params.InputProps,\n\n              endAdornment: (\n                <Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </Fragment>\n              ),\n            }}\n          />\n        )}\n        onChange={(event, value) => handleSelect(event, value)}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}