{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete, createFilterOptions, TextField } from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport const SearchBar = () => {\n  _s();\n\n  const history = useHistory();\n  const [value, setValue] = useState();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const classes = useStyles();\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n      await get(MATCHING_MOVIES, inputValue).then(data => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n\n        setLoading(false);\n      });\n    };\n\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleSelect = () => {\n    console.log(value); // console.log(movie);\n    // if (!movie.id) {\n    //   setDialogValue(movie);\n    //   setDialogOpen(true);\n    // } else {\n    //   setValue(movie);\n    //   history.push({\n    //     pathname: `/movie/${movie.id}`,\n    //   });\n    // }\n    //Route to movie page\n  };\n\n  const handleAddMovie = async movie => {\n    setDialogOpen(false);\n    await post(ADD_MOVIE, movie).then(data => {\n      console.log(\"sadfsadfsadf\");\n      history.push({\n        pathname: `/movie/${data}`\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: classes,\n      id: \"blur-on-select\",\n      blurOnSelect: true,\n      options: countries,\n      getOptionLabel: option => option.label,\n      autoHighlight: true // sx={{ width: 600 }}\n      // onOpen={() => {\n      //   setOpen(true);\n      // }}\n      // onClose={() => {\n      //   setOpen(false);\n      // }}\n      // style={{ color: \"white\" }}\n      // value={value}\n      // isOptionEqualToValue={(option, value) => option.title === value.title}\n      // open={open}\n      // filterOptions={(options, params) => {\n      //   const filtered = filter(options, params);\n      //   if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n      //     filtered.push({\n      //       inputValue: params.inputValue,\n      //       id: \"\",\n      //       title: `Add \"${params.inputValue}\"?`,\n      //       genre: \"\",\n      //       description: \"\",\n      //       rating: 0,\n      //       numberOfVotes: 0,\n      //     });\n      //   }\n      //   return filtered;\n      // }}\n      // onChange={(event, value) => {\n      //   console.log(\"qwerwer\");\n      // }}\n      // onInputChange={(event, newInputValue) => {\n      //   setInputValue(newInputValue);\n      // }}\n      // renderOption={(params, option, { selected }) => {\n      //   return (\n      //     <Button fullWidth key={option.id} onClick={() => (selected = true)}>\n      //       <Grid container spacing={4} width=\"100%\" color=\"white\">\n      //         <Grid item>\n      //           <img src={option.imageUrl} width=\"50px\" />\n      //         </Grid>\n      //         <Grid item>\n      //           <h3>{option.title}</h3>\n      //         </Grid>\n      //       </Grid>\n      //     </Button>\n      //   );\n      // }}\n      ,\n      renderOption: (props, option) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"qweqweqweq\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), option.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Choose a country\",\n        variant: \"outlined\",\n        inputProps: { ...params.inputProps,\n          autoComplete: \"new-password\",\n          style: {\n            paddingLeft: \"20px\"\n          } // disable autocomplete and autofill\n\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this) // renderInput={(params) => (\n      //   <TextField\n      //     {...params}\n      //     label=\"Movie\"\n      //     InputProps={{\n      //       ...params.InputProps,\n      //       classes: classes,\n      //       endAdornment: (\n      //         <Fragment>\n      //           {loading ? (\n      //             <CircularProgress color=\"inherit\" size={20} />\n      //           ) : null}\n      //           {params.InputProps.endAdornment}\n      //         </Fragment>\n      //       ),\n      //     }}\n      //   />\n      // )}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), dialogOpen && /*#__PURE__*/_jsxDEV(AddDialog, {\n      startValues: dialogValue,\n      handleAddMovie: handleAddMovie,\n      dialogOpen: dialogOpen,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchBar, \"YszveFl370XEZJVXot9WwrjwNT0=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = SearchBar;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n      color: \"white\"\n    }\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n      color: \"white\",\n      borderColor: \"white\"\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\"\n    }\n  }\n}));\nconst countries = [{\n  code: \"AD\",\n  label: \"Andorra\",\n  phone: \"376\"\n}, {\n  code: \"AE\",\n  label: \"United Arab Emirates\",\n  phone: \"971\"\n}, {\n  code: \"AF\",\n  label: \"Afghanistan\",\n  phone: \"93\"\n}, {\n  code: \"AG\",\n  label: \"Antigua and Barbuda\",\n  phone: \"1-268\"\n}, {\n  code: \"AI\",\n  label: \"Anguilla\",\n  phone: \"1-264\"\n}];\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movie_frontend/src/components/SearchBar.tsx"],"names":["React","useEffect","useState","Autocomplete","createFilterOptions","TextField","useHistory","ADD_MOVIE","get","MATCHING_MOVIES","post","makeStyles","AddDialog","filter","SearchBar","history","value","setValue","open","setOpen","options","setOptions","inputValue","setInputValue","loading","setLoading","dialogValue","setDialogValue","dialogOpen","setDialogOpen","classes","useStyles","active","length","undefined","getMovies","then","data","handleSelect","console","log","handleAddMovie","movie","push","pathname","handleClose","countries","option","label","props","params","inputProps","autoComplete","style","paddingLeft","theme","root","color","inputRoot","borderColor","code","phone"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Autocomplete,\n  Button,\n  CircularProgress,\n  createFilterOptions,\n  Grid,\n  IconButton,\n  TextField,\n} from \"@mui/material\";\nimport { IMovie } from \"../interfaces/movieInterface\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { ADD_MOVIE, get, MATCHING_MOVIES, post } from \"../services/restService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddDialog } from \"./AddDialog\";\nimport defaultImg from \"../images/avengers.jpeg\";\n\nexport interface IMovieOptionType {\n  id: string;\n  inputValue?: string;\n  title: string;\n  genre: string;\n\n  description: string;\n  rating: number;\n  numberOfVotes: number;\n}\n\nconst filter = createFilterOptions<IMovieOptionType>();\n\nexport const SearchBar = () => {\n  const history = useHistory();\n  const [value, setValue] = useState<IMovie>();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<readonly IMovie[]>([]);\n  const [inputValue, setInputValue] = useState(\"Movies\");\n  const [loading, setLoading] = useState(false);\n  const [dialogValue, setDialogValue] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const classes = useStyles();\n\n  useEffect(() => {\n    let active = true;\n\n    if (inputValue.length < 3) {\n      // setOptions(value ? [value] : []);\n\n      setOptions([]);\n      return undefined;\n    }\n\n    const getMovies = async () => {\n      setLoading(true);\n\n      await get(MATCHING_MOVIES, inputValue).then((data) => {\n        if (active) {\n          setOptions(data === undefined ? [] : data);\n        }\n        setLoading(false);\n      });\n    };\n    getMovies();\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleSelect = () => {\n    console.log(value);\n    // console.log(movie);\n    // if (!movie.id) {\n    //   setDialogValue(movie);\n    //   setDialogOpen(true);\n    // } else {\n    //   setValue(movie);\n    //   history.push({\n    //     pathname: `/movie/${movie.id}`,\n    //   });\n    // }\n    //Route to movie page\n  };\n  const handleAddMovie = async (movie: IMovie) => {\n    setDialogOpen(false);\n\n    await post(ADD_MOVIE, movie).then((data) => {\n      console.log(\"sadfsadfsadf\");\n\n      history.push({\n        pathname: `/movie/${data}`,\n      });\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        classes={classes}\n        id=\"blur-on-select\"\n        blurOnSelect\n        options={countries}\n        getOptionLabel={(option) => option.label}\n        autoHighlight\n        // sx={{ width: 600 }}\n        // onOpen={() => {\n        //   setOpen(true);\n        // }}\n        // onClose={() => {\n        //   setOpen(false);\n        // }}\n        // style={{ color: \"white\" }}\n        // value={value}\n        // isOptionEqualToValue={(option, value) => option.title === value.title}\n        // open={open}\n        // filterOptions={(options, params) => {\n        //   const filtered = filter(options, params);\n\n        //   if (options.length < 1 && params.inputValue.length > 2 && !loading) {\n        //     filtered.push({\n        //       inputValue: params.inputValue,\n        //       id: \"\",\n        //       title: `Add \"${params.inputValue}\"?`,\n        //       genre: \"\",\n\n        //       description: \"\",\n        //       rating: 0,\n        //       numberOfVotes: 0,\n        //     });\n        //   }\n        //   return filtered;\n        // }}\n        // onChange={(event, value) => {\n        //   console.log(\"qwerwer\");\n        // }}\n        // onInputChange={(event, newInputValue) => {\n        //   setInputValue(newInputValue);\n        // }}\n        // renderOption={(params, option, { selected }) => {\n        //   return (\n        //     <Button fullWidth key={option.id} onClick={() => (selected = true)}>\n        //       <Grid container spacing={4} width=\"100%\" color=\"white\">\n        //         <Grid item>\n        //           <img src={option.imageUrl} width=\"50px\" />\n        //         </Grid>\n        //         <Grid item>\n        //           <h3>{option.title}</h3>\n        //         </Grid>\n        //       </Grid>\n        //     </Button>\n        //   );\n        // }}\n        renderOption={(props, option) => (\n          <React.Fragment>\n            <span>qweqweqweq</span>\n            {option.label}\n          </React.Fragment>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Choose a country\"\n            variant=\"outlined\"\n            inputProps={{\n              ...params.inputProps,\n              autoComplete: \"new-password\",\n              style: { paddingLeft: \"20px\" }, // disable autocomplete and autofill\n            }}\n          />\n        )}\n        // renderInput={(params) => (\n        //   <TextField\n        //     {...params}\n        //     label=\"Movie\"\n        //     InputProps={{\n        //       ...params.InputProps,\n        //       classes: classes,\n\n        //       endAdornment: (\n        //         <Fragment>\n        //           {loading ? (\n        //             <CircularProgress color=\"inherit\" size={20} />\n        //           ) : null}\n        //           {params.InputProps.endAdornment}\n        //         </Fragment>\n        //       ),\n        //     }}\n        //   />\n        // )}\n      />\n      {dialogOpen && (\n        <AddDialog\n          startValues={dialogValue!}\n          handleAddMovie={handleAddMovie}\n          dialogOpen={dialogOpen}\n          handleClose={handleClose}\n        />\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n\n      color: \"white\",\n    },\n  },\n  inputRoot: {\n    color: \"white\",\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n\n      color: \"white\",\n      borderColor: \"white\",\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\",\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"red\",\n    },\n  },\n}));\n\nconst countries = [\n  { code: \"AD\", label: \"Andorra\", phone: \"376\" },\n  { code: \"AE\", label: \"United Arab Emirates\", phone: \"971\" },\n  { code: \"AF\", label: \"Afghanistan\", phone: \"93\" },\n  { code: \"AG\", label: \"Antigua and Barbuda\", phone: \"1-268\" },\n  { code: \"AI\", label: \"Anguilla\", phone: \"1-264\" },\n];\n"]},"metadata":{},"sourceType":"module"}