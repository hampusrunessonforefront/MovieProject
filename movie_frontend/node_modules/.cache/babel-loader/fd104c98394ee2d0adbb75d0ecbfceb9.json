{"ast":null,"code":"var _jsxFileName = \"/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n\n  const [suggestions, setSuggestions] = useState();\n  const [movieData, setMovieData] = useState([{\n    id: 1,\n    title: \"Iron pony\",\n    description: \"asdklfjsalkjdf\",\n    rating: 2,\n    numberOfVotes: 1\n  }, {\n    id: 2,\n    title: \"Spaceglider\",\n    description: \"space gliding monkeys\",\n    rating: 10,\n    numberOfVotes: 3\n  }]);\n\n  const handleSelect = (event, value) => {\n    console.log(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      freeSolo: true,\n      id: \"free-solo\",\n      disableClearable: true,\n      sx: {\n        width: 300\n      },\n      options: movieData.map(option => option.title),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Movie\",\n        InputProps: { ...params.InputProps,\n          type: \"search\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this),\n      onChange: (event, value) => handleSelect(event, value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SearchBar, \"6y2hJtdQ+oF9Gy1D9Q62Kwa9Kk4=\");\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/hampus.runesson/Kod/Code is king/MovieProject/movies_frontend/movie-app/src/components/SearchBar.tsx"],"names":["React","useState","Autocomplete","TextField","SearchBar","suggestions","setSuggestions","movieData","setMovieData","id","title","description","rating","numberOfVotes","handleSelect","event","value","console","log","width","map","option","params","InputProps","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,eAAxC;;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,EAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CACzC;AACEQ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,WAFT;AAGEC,IAAAA,WAAW,EAAE,gBAHf;AAIEC,IAAAA,MAAM,EAAE,CAJV;AAKEC,IAAAA,aAAa,EAAE;AALjB,GADyC,EAQzC;AACEJ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,aAFT;AAGEC,IAAAA,WAAW,EAAE,uBAHf;AAIEC,IAAAA,MAAM,EAAE,EAJV;AAKEC,IAAAA,aAAa,EAAE;AALjB,GARyC,CAAD,CAA1C;;AAiBA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAaC,KAAb,KAA+B;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,EAAE,EAAC,WAFL;AAGE,MAAA,gBAAgB,MAHlB;AAIE,MAAA,EAAE,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAJN;AAKE,MAAA,OAAO,EAAEZ,SAAS,CAACa,GAAV,CAAeC,MAAD,IAAYA,MAAM,CAACX,KAAjC,CALX;AAME,MAAA,WAAW,EAAGY,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,UAAU,EAAE,EACV,GAAGA,MAAM,CAACC,UADA;AAEVC,UAAAA,IAAI,EAAE;AAFI;AAHd;AAAA;AAAA;AAAA;AAAA,cAPJ;AAgBE,MAAA,QAAQ,EAAE,CAACT,KAAD,EAAQC,KAAR,KAAkBF,YAAY,CAACC,KAAD,EAAQC,KAAR;AAhB1C;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAsBD,CA7CM;;GAAMZ,S;;KAAAA,S","sourcesContent":["import React, { useState } from \"react\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nexport const SearchBar = () => {\n  const [suggestions, setSuggestions] = useState();\n  const [movieData, setMovieData] = useState([\n    {\n      id: 1,\n      title: \"Iron pony\",\n      description: \"asdklfjsalkjdf\",\n      rating: 2,\n      numberOfVotes: 1,\n    },\n    {\n      id: 2,\n      title: \"Spaceglider\",\n      description: \"space gliding monkeys\",\n      rating: 10,\n      numberOfVotes: 3,\n    },\n  ]);\n\n  const handleSelect = (event: any, value: string) => {\n    console.log(value);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        freeSolo\n        id=\"free-solo\"\n        disableClearable\n        sx={{ width: 300 }}\n        options={movieData.map((option) => option.title)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Movie\"\n            InputProps={{\n              ...params.InputProps,\n              type: \"search\",\n            }}\n          />\n        )}\n        onChange={(event, value) => handleSelect(event, value)}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}